{"version":3,"sources":["scripts/components/photo-fullview.js","scripts/utils/grid-masonry.js","../config/config.js","scripts/services/network-stuff.js","scripts/components/photo.js","scripts/utils/infinite-scroll.js","scripts/components/photo-grid.js","scripts/utils/debounce.js","scripts/components/search-bar.js","scripts/index.js"],"names":["_img","PhotoFullview","render","base","containerFragment","document","createDocumentFragment","close","createElement","classList","add","innerHTML","addEventListener","remove","body","appendChild","open","photo","setAttribute","width","height","urls","full","alt_description","style","backgroundColor","color","parentNode","breakpointsAndCols","_target","_resizeId","setup","target","setColsClass","addBreakElements","contains","getCurrentCols","className","replace","keys","Object","key","window","matchMedia","matches","querySelectorAll","length","i","breakElement","setHeight","removeProperty","heights","children","forEach","item","computedStyles","getComputedStyle","order","getPropertyValue","Math","ceil","parseFloat","max","addEventListeners","onResize","cancelAnimationFrame","requestAnimationFrame","refresh","removeBreakElements","breakElements","destroy","removeEventListeners","removeEventListener","appendNewItems","newItems","insertBefore","querySelector","GridMasonry","init","freeze","unsplashNamespace","unsplashClientId","getFromUnsplash","endPoint","fetch","config","method","headers","then","response","json","getPhotos","page","searchPhotos","searchTerm","onZoom","container","windowWidth","innerWidth","insertAdjacentHTML","thumb","small","regular","localStorage","getItem","id","removeItem","setItem","toggle","currentPage","totalPages","loadMore","sentinel","loading","thresholdReached","toggleLoading","intersectionObserver","IntersectionObserver","entries","isIntersecting","rootMargin","threshold","disconnect","apply","arguments","observe","_searchTerm","_infiniteScroller","PhotoGrid","photos","scrollTop","documentElement","NetworkStuff","results","alert","total_pages","Photo","photoFragment","func","delay","timeout","clearTimeout","setTimeout","onSearch","input","value"],"mappings":"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","file":"scripts.07ffac89.js","sourceRoot":"../src","sourcesContent":["let _img;\n\nexport default class PhotoFullview {\n  static render(base) {\n    const containerFragment = document.createDocumentFragment(),\n      close = document.createElement('span');\n\n    _img = document.createElement('img');\n    close.classList.add('close');\n    close.innerHTML = 'Ã—';\n    close.addEventListener('click', () => {\n      base.classList.remove('open');\n      document.body.classList.remove('photo-fullview-active');\n    });\n\n    containerFragment.appendChild(_img);\n    containerFragment.appendChild(close);\n    base.appendChild(containerFragment);\n  }\n\n  static open(photo) {\n    _img.setAttribute('width', photo.width);\n    _img.setAttribute('height', photo.height);\n    _img.setAttribute('src', photo.urls.full);\n    _img.setAttribute('alt', photo.alt_description);\n    _img.style.backgroundColor = photo.color;\n    _img.parentNode.classList.add('open');\n    document.body.classList.add('photo-fullview-active');\n  }\n};\n","const breakpointsAndCols = {\n  'min-width: 1500px': 6,\n  'min-width: 1200px': 5,\n  'min-width: 992px': 4,\n  'min-width: 768px': 3,\n  'min-width: 576px': 2\n};\n\nlet _target,\n  _resizeId;\n\nfunction setup(target) {\n  setColsClass(target);\n  addBreakElements(target);\n};\n\nfunction setColsClass(target) {\n  if (target.classList.contains(`grid-masonry-cols-${getCurrentCols()}`)) {\n    return;\n  }\n\n  target.className = target.className.replace(/(grid-masonry-cols-\\d+)/, '');\n  target.classList.add(`grid-masonry-cols-${getCurrentCols()}`);\n};\n\nfunction getCurrentCols() {\n  const keys = Object.keys(breakpointsAndCols);\n\n  for (const key of keys) {\n    /* For some reason, matchMedia doesn't work as expected when you use responsive mode\n    Works perfectly when you resize the browser window directly */\n    if (window.matchMedia(`(${key})`).matches) {\n      return breakpointsAndCols[key];\n    }\n  }\n\n  return 1;\n};\n\nfunction addBreakElements(target) {\n  const breakElements = target.querySelectorAll('.grid-masonry-break');\n\n  if ([...breakElements].length === (getCurrentCols() - 1)) {\n    return;\n  }\n\n  for (let i = 1; i < getCurrentCols(); i++) {\n    const breakElement = document.createElement('div');\n\n    breakElement.classList.add('grid-masonry-break');\n    breakElement.classList.add(`grid-masonry-break-${i}`);\n    target.appendChild(breakElement);\n  }\n};\n\nfunction setHeight(target) {\n  if (getCurrentCols() < 2) {\n    target.style.removeProperty('height');\n\n    return;\n  }\n\n  const heights = [];\n\n  [...target.children].forEach(item => {\n    if (item.classList.contains('grid-masonry-break')) {\n      return;\n    }\n\n    const computedStyles = window.getComputedStyle(item),\n      order = computedStyles.getPropertyValue('order'),\n      height = computedStyles.getPropertyValue('height');\n\n    if (!heights[order - 1]) {\n      heights[order - 1] = 0;\n    }\n\n    heights[order - 1] += Math.ceil(parseFloat(height));\n  });\n\n  // Height of the tallest column\n  target.style.height = `${Math.max(...heights)}px`;\n};\n\nfunction addEventListeners() {\n  window.addEventListener('resize', onResize);\n};\n\nfunction onResize() {\n  if (_resizeId) {\n    window.cancelAnimationFrame(_resizeId);\n  }\n\n  _resizeId = window.requestAnimationFrame(refresh);\n};\n\nfunction refresh() {\n  setColsClass(_target);\n  removeBreakElements(_target);\n  addBreakElements(_target);\n  setHeight(_target);\n};\n\nfunction removeBreakElements(target) {\n  const breakElements = target.querySelectorAll('.grid-masonry-break');\n\n  if ([...breakElements].length === (getCurrentCols() - 1)) {\n    return;\n  }\n\n  [...breakElements].forEach(breakElement => {\n    breakElement.remove();\n  });\n};\n\nfunction destroy() {\n  removeEventListeners();\n};\n\nfunction removeEventListeners() {\n  window.removeEventListener('resize', onResize);\n};\n\nfunction appendNewItems(newItems) {\n  _target.insertBefore(newItems, document.querySelector('.grid-masonry-break'));\n  refresh();\n}\n\nexport default class GridMasonry {\n  static init(target) {\n    _target = target;\n    setup(target);\n    setHeight(target);\n    addEventListeners();\n\n    GridMasonry.appendNewItems = appendNewItems;\n    GridMasonry.refresh = refresh;\n    GridMasonry.destroy = destroy;\n  }\n};\n","export default Object.freeze({\n  unsplashNamespace: 'https://api.unsplash.com',\n  unsplashClientId: '8pKSNWaCfMUc9rx0FMlytsPJhdzo131I46PAbnbJ5_o'\n});\n","import config from '../../../config/config';\n\nfunction getFromUnsplash(endPoint) {\n  return fetch(config.unsplashNamespace + '/' + endPoint, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Client-ID ${config.unsplashClientId}`\n    }\n  })\n    .then(response => response.json());\n}\n\nexport default class {\n  static async getPhotos(page) {\n    return getFromUnsplash(`photos?page=${page}&per_page=30`);\n  }\n\n  static async searchPhotos(searchTerm, page) {\n    return getFromUnsplash(`search/photos?query=${searchTerm}&page=${page}&per_page=30`);\n  }\n}\n","export default class {\n  static render(base, { photo, onZoom }) {\n    const container = document.createElement('div'),\n      windowWidth = window.innerWidth;\n\n    container.classList.add('grid-masonry-item');\n    container.insertAdjacentHTML('beforeend', `\n      <img width=\"${photo.width}\" height=\"${photo.height}\"\n        style=\"background-color: ${photo.color}\"\n        loading=\"lazy\"\n        srcset=\"${photo.urls.thumb} 200w,\n          ${photo.urls.small} 400w,\n          ${photo.urls.regular} 1080w\"\n        sizes=\"(min-width: 1500px) ${Math.ceil(windowWidth / 6)}px,\n          (min-width: 1200px) ${Math.ceil(windowWidth / 5)}px,\n          (min-width: 992px) ${Math.ceil(windowWidth / 4)}px,\n          (min-width: 768px) ${Math.ceil(windowWidth / 3)}px,\n          (min-width: 576px) ${Math.ceil(windowWidth / 2)}px\"\n        src=\"${photo.urls.regular}\"\n        alt=\"${photo.alt_description}\"\n      >\n      <span class=\"like ${localStorage.getItem(`photo:${photo.id}:liked`) ? 'liked' : ''}\"></span>\n      <span class=\"zoom\"></span>\n    `);\n\n    container.addEventListener('click', ({ target }) => {\n      if (target.matches('.like')) {\n        localStorage.getItem(`photo:${photo.id}:liked`)\n          ? localStorage.removeItem(`photo:${photo.id}:liked`)\n          : localStorage.setItem(`photo:${photo.id}:liked`, 1);\n  \n        target.classList.toggle('liked');\n      } else if (target.matches('.zoom')) {\n        onZoom(photo);\n      }\n    });\n\n    base.appendChild(container);\n  }\n};\n","export default function (base, currentPage, totalPages, loadMore) {\n  const sentinel = document.createElement('div'),\n    options = {\n      rootMargin: '0px',\n      threshold: 1\n    };\n\n  let loading,\n    thresholdReached;\n\n  function toggleLoading() {\n    loading = !loading;\n    sentinel.classList.toggle('loading');\n\n    if (currentPage === totalPages) {\n      thresholdReached = true;\n      sentinel.classList.add('ended');\n    }\n  }\n\n  sentinel.setAttribute('id', 'sentinel');\n  base.appendChild(sentinel);\n\n  const intersectionObserver = new IntersectionObserver(async entries => {\n    if (!thresholdReached && !loading && entries[0].isIntersecting) {\n      toggleLoading();\n      await loadMore(++currentPage);\n      toggleLoading();\n    }\n  }, options),\n    { disconnect } = intersectionObserver;\n\n  intersectionObserver.disconnect = function () {\n    sentinel.remove();\n    disconnect.apply(intersectionObserver, arguments);\n  };\n  \n  intersectionObserver.observe(sentinel);\n\n  return intersectionObserver;\n}\n","import GridMasonry from '../utils/grid-masonry';\nimport NetworkStuff from '../services/network-stuff';\nimport Photo from './photo';\nimport PhotoFullview from './photo-fullview';\nimport setupInfiniteScroll from '../utils/infinite-scroll';\n\nfunction onZoom(photo) {\n  PhotoFullview.open(photo);\n}\n\nlet _searchTerm,\n  _infiniteScroller;\n\nexport default class PhotoGrid {\n  static async render(base, searchTerm) {\n    let photos,\n      totalPages;\n\n    // reset\n    document.body.scrollTop = document.documentElement.scrollTop = 0;\n    base.querySelector('.grid-masonry') && base.querySelector('.grid-masonry').remove();\n    _infiniteScroller && _infiniteScroller.disconnect();\n\n    _searchTerm = searchTerm;\n\n    if (_searchTerm) {\n      const response = await NetworkStuff.searchPhotos(_searchTerm, 1);\n\n      photos = response.results;\n      if (!photos.length) {\n        alert('No results found!');\n        return;\n      }\n\n      totalPages = response.total_pages;\n    } else {\n      photos = await NetworkStuff.getPhotos(1);\n    }\n\n    const container = document.createElement('div');\n\n    container.classList.add('grid-masonry');\n    photos.forEach(photo => Photo.render(container, { photo, onZoom }));\n    base.appendChild(container);\n    GridMasonry.init(container);\n\n    _infiniteScroller = setupInfiniteScroll(base, 1, totalPages, PhotoGrid.loadMore);\n  }\n\n  static async loadMore(page) {\n    const photoFragment = document.createDocumentFragment();\n    let photos;\n\n    if (_searchTerm) {\n      photos = (await NetworkStuff.searchPhotos(_searchTerm, page)).results;\n    } else {\n      photos = await NetworkStuff.getPhotos(page);\n    }\n\n    photos.forEach(photo => Photo.render(photoFragment, { photo, onZoom }));\n    GridMasonry.appendNewItems(photoFragment);\n  }\n};\n","export default function (func, delay) {\n  let timeout;\n\n  return function () {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, arguments), delay);\n  };\n};\n","import debounce from '../utils/debounce';\n\nexport default class {\n  static render(base, onSearch) {\n    const input = document.createElement('input');\n\n    input.setAttribute('type', 'search');\n    input.setAttribute('placeholder', 'Search...');\n    input.setAttribute('aria-label', 'Search');\n    input.addEventListener('input', debounce(function () {\n      onSearch(this.value);\n    }, 700));\n\n    base.appendChild(input);\n  }\n};\n","import PhotoFullview from './components/photo-fullview';\nimport PhotoGrid from './components/photo-grid';\nimport SearchBar from './components/search-bar';\n\n// bootstrap stuff\n(async function () {\n  SearchBar.render(\n    document.querySelector('.search-bar'),\n    searchTerm => PhotoGrid.render(document.querySelector('.photo-grid'), searchTerm)\n  );\n  await PhotoGrid.render(document.querySelector('.photo-grid'));\n  PhotoFullview.render(document.querySelector('.photo-fullview'));\n})();\n"]}